SET SERVEROUTPUT ON

/* Task 1-1 */
CREATE OR REPLACE PROCEDURE prc_employee_hire_sp(p_first_name IN VARCHAR2, p_last_name IN VARCHAR2, 
    p_email IN VARCHAR2, p_salary IN NUMBER, p_hire_date IN DATE, p_phone IN VARCHAR2, p_job_id IN VARCHAR2, 
    p_manager_id IN NUMBER, p_department_id IN NUMBER) AS
BEGIN
    INSERT INTO hr_employees (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, manager_id, department_id)
    VALUES(hr_employees_seq.NEXTVAL, p_first_name, p_last_name, p_email, p_phone, p_hire_date, p_job_id, p_salary, p_manager_id, p_department_id);
    COMMIT;
END prc_employee_hire_sp;
/

/* Validation */
EXECUTE prc_employee_hire_sp('John', 'Doe', 'JDOE', 6000, TO_DATE('95-06-05', 'YY-MM-DD'), '555.555.5555', 'HR_REP', 205, 110);

/* Restore database */
DELETE FROM hr_employees WHERE first_name = 'John' AND email = 'JDOE';


/* Task 1-2 - Implementation of Department Search */ 
CREATE OR REPLACE PROCEDURE prc_employee_update_sp(p_first_name IN VARCHAR2, p_last_name IN VARCHAR2, 
    p_email IN VARCHAR2, p_salary IN NUMBER, p_hire_date IN DATE, p_phone IN VARCHAR2, p_job_id IN VARCHAR2, 
    p_manager_id IN NUMBER, p_department_id IN VARCHAR2) AS
    v_department_id NUMBER;
BEGIN
    SELECT department_id INTO v_department_id FROM hr_departments WHERE department_name = INITCAP(p_department_id);
    INSERT INTO hr_employees (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, manager_id, department_id)
    VALUES(hr_employees_seq.NEXTVAL, p_first_name, p_last_name, p_email, p_phone, p_hire_date, p_job_id, p_salary, p_manager_id, v_department_id);
    COMMIT;
END prc_employee_hire_sp;
/

/* Validation */
EXECUTE prc_employee_hire_sp('John', 'Doe', 'JDOE', 6000, TO_DATE('95-06-05', 'YY-MM-DD'), '555.555.5555', 'HR_REP', 205, 'MARKETING');
SELECT * FROM hr_employees;

/* Restore database */
DELETE FROM hr_employees WHERE first_name = 'John' AND email = 'JDOE';


/* Task 1-3 */
CREATE OR REPLACE PROCEDURE prc_employee_edit(p_emp_id IN NUMBER, p_salary IN NUMBER, p_phone IN VARCHAR2, p_email IN VARCHAR2) AS
BEGIN
    UPDATE hr_employees
    SET salary = p_salary, phone_number = p_phone, email = p_email
    WHERE employee_id = p_emp_id;
    COMMIT;
END prc_employee_edit;
/


/* Task 2-1 - Identify Job Description */
CREATE OR REPLACE FUNCTION fn_get_job(p_job_id VARCHAR2) 
RETURN VARCHAR2 IS
    v_job_title VARCHAR2(50);
BEGIN
    SELECT job_title INTO v_job_title FROM hr_jobs WHERE job_id = p_job_id;
    RETURN v_job_title;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    v_job_title := 'No job title found.';
    RETURN v_job_title;
END fn_get_job;
/

/* Validation */
EXECUTE DBMS_OUTPUT.PUT_LINE(fn_get_job('AD_VP'));
EXECUTE DBMS_OUTPUT.PUT_LINE(fn_get_job('DNE'));


/* Task 2-2 - Allow end user to change Job Desc */
CREATE OR REPLACE PROCEDURE prc_job_desc(p_job_id IN VARCHAR2, p_job_title IN VARCHAR2, p_min_salary IN NUMBER, p_max_salary IN NUMBER) AS
BEGIN
    UPDATE hr_jobs
    SET job_title = p_job_title, min_salary = p_min_salary, max_salary = p_max_salary
    WHERE job_id = p_job_id;
    COMMIT;
END prc_job_desc;
/

/* Validation */
EXECUTE prc_job_desc('AD_PRES', 'Falafel', 5000, 20000);
SELECT * FROM hr_jobs;

/* Restore data */
UPDATE hr_jobs SET job_title = 'President', min_salary = 20000, max_salary = 40000 WHERE job_id = 'AD_PRES'; 
COMMIT;


/* Task 2-3 Create New Job */
CREATE OR REPLACE PROCEDURE prc_new_job(
    p_jobid IN hr_jobs.job_id%TYPE, 
    p_title IN hr_jobs.job_title%TYPE,
    v_minsal IN hr_jobs.min_salary%TYPE) IS
    v_maxsal hr_jobs.max_salary%TYPE := 2 * v_minsal;
BEGIN
    INSERT INTO hr_jobs(job_id, job_title, min_salary, max_salary)
    VALUES (p_jobid, p_title, v_minsal, v_maxsal);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE ('New row added to hr_jobs table:');
    DBMS_OUTPUT.PUT_LINE (p_jobid || ' ' || p_title || ' ' || v_minsal || ' ' || v_maxsal);
END prc_new_job;
/

/* Validation */
EXECUTE prc_new_job('TEST', 'Testing title', 5000);
SELECT * FROM hr_jobs;
DELETE FROM hr_jobs WHERE job_id = 'TEST';


/* Task 3 */
CREATE OR REPLACE PROCEDURE prc_check_salary(p_job VARCHAR2, p_salary NUMBER) IS
    v_minsal hr_jobs.min_salary%type;
    v_maxsal hr_jobs.max_salary%type;
BEGIN
    SELECT min_salary, max_salary INTO v_minsal, v_maxsal
    FROM hr_jobs
    WHERE job_id = UPPER(p_job);
    IF p_salary NOT BETWEEN v_minsal AND v_maxsal THEN
        RAISE_APPLICATION_ERROR(-20100, 'Invalid salary $' || p_salary || '. ' || 'Salaries for job ' || p_job
        || ' must be between $' || v_minsal || ' and $' || v_maxsal);
    END IF;
END prc_check_salary;
/

CREATE OR REPLACE TRIGGER trg_check_salary
BEFORE INSERT OR UPDATE OF job_id, salary
ON hr_employees
FOR EACH ROW
BEGIN
    prc_check_salary(:new.job_id, :new.salary);
END;
/

/* Test Case 1 */
EXECUTE prc_employee_hire_sp('Elenor', 'Beh', 'ABC@abc', 1000, TO_DATE('95-06-05', 'YY-MM-DD'), '555-555-5555', 'SA_REP', 145, 30);
/* Executing this shows error - Invalid salary $1000. Salaries for job SA_REP must be between $6000 and $12000 */

/* Test Case 2 */
EXECUTE prc_employee_edit(115, 2000, '515.127.4562', 'AKHOO');
/* Executing this shows error - Invalid salary $2000. Salaries for job PU_CLERK must be between $2500 and $5500 */

/* Test Case 3 */
UPDATE hr_employees SET job_id = 'HR_REP' WHERE employee_id = 115;
/* Executing this shows error - Invalid salary $3100. Salaries for job HR_REP must be between $4000 and $9000 */
